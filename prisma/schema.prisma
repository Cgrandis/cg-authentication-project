generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  name            String
  email           String    @unique
  password        String?    
  role            Role?
  slug            String?   @unique
  image           String?
  contactNumber   String?
  instagramLink   String?
  linkedin        String?
  city            String?
  country         String?
  bio             String?
  specialties     String?
  profilePhoto    String?
  portfolioPhotos String[]
  bookings        Booking[]
  services        Service[] @relation("ProviderServices")
  accounts        Account[] // ← Obrigatório para NextAuth
  sessions        Session[] // ← Obrigatório para NextAuth
  createdAt       DateTime  @default(now())
}

model Service {
  id             String   @id @default(uuid())
  title          String
  description    String
  duration       Int
  photos         String[] 
  instagramLink  String? 
  contactNumber  String?  
  email          String?  
  availability   Json?    
  provider       User     @relation("ProviderServices", fields: [providerId], references: [id])
  providerId     String
  bookings       Booking[]
}

model Booking {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  service    Service  @relation(fields: [serviceId], references: [id])
  serviceId  String
  date       DateTime
}

enum Role {
  ADMIN
  PROVIDER
  USER
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? 
  access_token       String? 
  expires_at         Int?    
  token_type         String? 
  scope              String? 
  id_token           String? 
  session_state      String? 
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model TechDescription {
  id          String   @id @default(cuid())
  title       String
  description String
  createdAt   DateTime @default(now())
}

